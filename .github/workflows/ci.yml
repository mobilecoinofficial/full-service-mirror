name: full-service-mirror-build-release

env:
  DOCKERHUB_REPO: mobilecoin/full-service-mirror
  SGX_MODE: HW
  IAS_MODE: PROD
  RUST_BACKTRACE: full
  CONSENSUS_ENCLAVE_CSS: /var/tmp/consensus-enclave.css
  INGEST_ENCLAVE_CSS: /var/tmp/ingest-enclave.css

on:
  push:
    branches:
      - 'main'
      - 'develop'
      - 'release/*'
      - 'feature/*'
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    # Needs write permission for publishing release
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    container:
      image: mobilecoin/rust-sgx-base:0.0.3
    strategy:
      matrix:
        include:
          - namespace: test
            network: testnet
          - namespace: prod
            network: mainnet

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # CACHE_VERSION is 'date --iso-8601=minutes' and is used to invalidate cache if needed
      - name: Cache Build Binaries
        id: artifact_cache
        uses: actions/cache@v2
        with:
          path: |
            build_artifacts
          key: ${{ runner.os }}-${{ matrix.network }}-${{ secrets.CACHE_VERSION }}-build-cargo-artifacts-${{ hashFiles('**/*.rs', '**/*.proto', '**/Cargo.toml')}}

      - name: Cache Cargo
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        id: cargo_cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.network }}-${{ secrets.CACHE_VERSION }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Consensus SigStruct
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          CONSENSUS_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep consensus-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${CONSENSUS_SIGSTRUCT_URI})

      - name: Ingest SigStruct
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          INGEST_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep ingest-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${INGEST_SIGSTRUCT_URI})

      - name: Cargo Build
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          cargo build --release \
          --manifest-path full-service/Cargo.toml \
          -p mc-full-service \
          -p mc-validator-service \
          && cargo build --release

      - name: Copy binaries to cache folder
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p build_artifacts/${{ matrix.network }}/bin
          cp /var/tmp/*.css build_artifacts/${{ matrix.network }}
          cp -R create-release/package-${{ matrix.network }}/* build_artifacts/${{ matrix.network }}
          cp full-service/target/release/full-service build_artifacts/${{ matrix.network }}/bin/
          cp full-service/target/release/mc-validator-service build_artifacts/${{ matrix.network }}/bin/
          cp target/release/wallet-service-mirror-private build_artifacts/${{ matrix.network }}/bin/
          cp target/release/wallet-service-mirror-public build_artifacts/${{ matrix.network }}/bin/

      # Create and Upload an Artifact on Push and Not a Tag
      - name: Create Artifact
        if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir -p artifact
          cd artifact && tar -czvf ${{ github.sha }}-${{ matrix.network }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      - name: Upload Artifact
        if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v2
        with:
          name: full-service-mirror_${{ matrix.network }}
          path: artifact/${{ github.sha }}-${{ matrix.network }}.tar.gz

      # Create and Upload a GH Release if it is a tag
      - name: Get the Tag
        if: startsWith(github.ref, 'refs/tags/v')
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir -p release
          cd release && tar -czvf ${{ steps.tag.outputs.tag }}-${{ matrix.network }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      # Does the tag have the "pre" key word in it? Will mark it as prerelease
      - name: Is Prerelease
        shell: bash
        id: prerelease
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          if [[ $GITHUB_REF == *"pre"* ]]; then
            echo ::set-output name=value::true
          else
            echo ::set-output name=value::false
          fi

      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ steps.prerelease.outputs.value }}
          files: release/${{ steps.tag.outputs.tag }}-${{ matrix.network }}.tar.gz

  docker:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        include:
          - namespace: test
            network: testnet
          - namespace: prod
            network: mainnet
    outputs:
      tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Cache Build Binaries
        id: artifact_cache
        uses: actions/cache@v2
        with:
          path: |
            build_artifacts
          key: ${{ runner.os }}-${{ matrix.network }}-${{ secrets.CACHE_VERSION }}-build-cargo-artifacts-${{ hashFiles('**/*.rs', '**/*.proto', '**/Cargo.toml')}}

      # Caching seems to not work when you push a tag (I think because of scope) so download the just uploaded release
      # See issue here: https://github.com/actions/cache/issues/556
      - name: Download Release on Cache Miss
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        uses: duhow/download-github-release-assets@v1
        with:
          tag: ${{ needs.build.outputs.tag }}
          files: |
            ${{ needs.build.outputs.tag }}-${{ matrix.network }}.tar.gz
          target: /var/tmp/${{ needs.build.outputs.tag }}-${{ matrix.network }}.tar.gz

      - name: Extract Release
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p build_artifacts/${{ matrix.network }}
          tar xzvf /var/tmp/${{ needs.build.outputs.tag }}-${{ matrix.network }}.tar.gz -C build_artifacts/${{ matrix.network }}

      - name: Generate Docker Tags
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKERHUB_REPO }}
          flavor: |
            latest=false
            suffix=-${{ matrix.network }}
          tags: |
            type=semver,pattern=v{{version}},priority=20
            type=sha,priority=10

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Publish to DockerHub
        id: docker_publish_dockerhub
        uses: docker/build-push-action@v2
        with:
          build-args: |
            NETWORK=${{ matrix.network }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          file: Dockerfile.ci
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}

  # Only create a new tag if push to develop(prerelease) or main(release)
  # Will automatically bump "#patch" by default
  # Use "#major", "#minor", "#patch". "#none" in commit message to adjust bump.
  #
  # Requires mobilecoin-ci user R/W access and ACTIONS_TOKEN
  tag:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Github Tag Bump
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
          RELEASE_BRANCHES: main
          PRERELEASE_SUFFIX: pre
          WITH_V: 'true'
          DEFAULT_BUMP: patch
